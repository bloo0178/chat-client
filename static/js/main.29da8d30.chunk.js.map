{"version":3,"sources":["actions/actions.js","api/sb_api.js","components/Login.js","components/Channels/ChannelList.js","components/Channels/CreateChannel.js","components/Channels/Channels.js","components/Chat/CreateMessage.js","components/Chat/DisplayMessages.js","components/Chat/Participants.js","components/Chat/InfoBar/OptionsMenu.js","components/Chat/InfoBar/InfoBar.js","components/Chat/Chat.js","components/Navbar/AlertDialog.js","components/Navbar/NavMenu.js","components/Navbar/Navbar.js","App.js","serviceWorker.js","reducers/reducers.js","index.js"],"names":["setUserID","userid","type","addMessage","sender","message","updateParticipants","participants","setChannel","channel","clearChannel","sb","appId","process","login","username","store","dispatch","setSBSess","Promise","resolve","connect","user","error","console","log","logout","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","disconnectSession","wrap","_context","prev","next","getState","disconnect","exitChannel","stop","this","apply","arguments","enterChannel","channelURL","oldChannel","_ref2","_callee2","_context2","OpenChannel","getChannel","enter","response","_x","channelHandlerID","removeChannelHandler","exit","createChannel","channelName","userID","sbsession","currentUser","userId","url","deleteChannel","delete","addChannelHandler","ChannelHandler","userinfo","connectedAt","_connectedAt","concat","getParticipantList","list","createParticipantListQuery","participantList","map","participant","push","setChannelHandlerID","onUserEntered","openChannel","onUserExited","onMessageReceived","_sender","getChannelList","_ref3","_callee3","_context3","abrupt","createOpenChannelListQuery","channels","sendMessage","sendUserMessage","Login","props","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","setState","target","value","handleClick","state","history","loading","classes","react_default","createElement","Grid_default","container","className","root","direction","justify","alignItems","TextField_default","placeholder","margin","label","InputLabelProps","shrink","onChange","Button_default","variant","color","onClick","React","Component","withStyles","height","ChannelList","channelList","_this2","Paper_default","paper","List_default","subheader","ListSubheader_default","index","key","name","toString","button","width","minWidth","maxWidth","display","padding","textAlign","heading","justifyContent","maxHeight","overflowY","CreateChannel","open","handleClose","handleCreate","newChannelURL","sent","Fab_default","fab","Add_default","Dialog_default","onClose","DialogTitle_default","id","DialogContent_default","autoFocus","fullWidth","DialogActions_default","position","bottom","right","Channels_ChannelList","Channels_CreateChannel","CreateMessage","multiline","rowsMax","textField","InputProps","endAdornment","InputAdornment_default","IconButton_default","SendRounded_default","DisplayMessages","newMessage","setNewMessageRef","element","scrollToBottom","scrollIntoView","bubbleClass","displayMessage","messageList","messages","bubbleYou","infoMessage","bubbleOther","ref","bubbleWrapper","listStyle","overflowWrap","whiteSpace","background","borderRadius","lineHeight","marginBottom","marginRight","marginLeft","marginTop","Participants","ListItem_default","Drawer_default","toggle","OptionsMenu","anchorEl","currentTarget","handleLeave","handleDelete","toggleParticipants","disableDelete","isOperatorWithUserId","getCurrentUserId","Boolean","MoreVert_default","Menu_default","MenuItem_default","disabled","deleteButton","Chat_Participants","InfoBar","Toolbar_default","Typography_default","InfoBar_OptionsMenu","Chat","onUnload","preventDefault","returnValue","window","addEventListener","removeEventListener","loadingSpinner","CircularProgress_default","infoContainer","Chat_InfoBar_InfoBar","displayMessages","Chat_DisplayMessages","createMessage","Chat_CreateMessage","flexFlow","minHeight","paddingLeft","paddingRight","AlertDialog","showAlert","toggleAlert","DialogContentText_default","NavMenu","handleOpen","handleToChat","icons_Menu_default","component","Link","to","Navbar_AlertDialog","menuIcon","AppBar_default","grow","Navbar_NavMenu","App","BrowserRouter","Route","Navbar","path","exact","Channels","Redirect","location","hostname","match","userinfoInitState","sbsessionInitState","channelInitState","rootReducer","combineReducers","length","undefined","action","assign","toConsumableArray","__webpack_require__","d","__webpack_exports__","createStore","ReactDOM","render","Fragment","CssBaseline_default","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.29da8d30.chunk.js","sourcesContent":["export const setUserID = userid => ({\r\n    type: 'SET_USERID',\r\n    userid\r\n})\r\n\r\nexport const setSBSess = sb => ({\r\n    type: 'SET_SBSESS',\r\n    sb\r\n})\r\n\r\n// sender will be either 'You', [other senderID], or 'info'\r\nexport const addMessage = (sender,message) => ({\r\n    type: 'ADD_MESSAGE',\r\n    sender, \r\n    message\r\n})\r\n\r\nexport const clearMessages = () => ({\r\n    type: 'CLEAR_MESSAGES'\r\n})\r\n\r\nexport const updateParticipants = participants => ({\r\n    type: 'UPDATE_PARTICIPANTS',\r\n    participants\r\n})\r\n\r\nexport const refreshChannels = channels => ({\r\n    type: 'REFRESH_CHANNELS',\r\n    channels\r\n})\r\n\r\nexport const setChannelHandlerID = channelHandlerID => ({\r\n    type: 'SET_CHANNEL_HANDLER_ID',\r\n    channelHandlerID\r\n})\r\n\r\nexport const setChannel = channel => ({\r\n    type: 'SET_CHANNEL', \r\n    channel\r\n})\r\n\r\nexport const clearChannel = channel => ({\r\n    type: 'CLEAR_CHANNEL', \r\n    channel\r\n})","import {\r\n    clearMessages, setUserID, setSBSess,\r\n    updateParticipants, addMessage, setChannel, \r\n    clearChannel, setChannelHandlerID,\r\n} from '../actions/actions';\r\nimport { store } from '../index';\r\nimport * as SendBird from 'sendbird';\r\n\r\nvar sb = new SendBird({ 'appId': process.env.REACT_APP_SB_APP_ID });\r\n\r\nexport const login = (username) => {\r\n    store.dispatch(setSBSess(sb));\r\n    return new Promise(resolve => {\r\n        sb.connect(username, (user, error) => {\r\n            if (error) return console.log(error);\r\n            store.dispatch(setUserID(username));\r\n            resolve(user);\r\n        });\r\n    });\r\n};\r\n\r\n\r\nexport const logout = async () => {\r\n    let channel = store.getState().channel.channel;\r\n    const disconnectSession = () => {\r\n        return new Promise(resolve => {\r\n            sb.disconnect(() => {\r\n                resolve();\r\n            });\r\n        });\r\n    };\r\n    if (channel) { await exitChannel(); };\r\n    await disconnectSession();\r\n    store.dispatch(setUserID(''));\r\n};\r\n\r\n\r\nexport const enterChannel = (channelURL) => {\r\n    let oldChannel = store.getState().channel.channel;\r\n    return new Promise(async resolve => {\r\n        if (oldChannel) await exitChannel();\r\n        sb.OpenChannel.getChannel(channelURL, (channel, error) => {\r\n            if (error) return console.log(error);\r\n            channel.enter((response, error) => {\r\n                if (error) return console.log(error);\r\n                store.dispatch(clearMessages());\r\n                store.dispatch(setChannel(channel));\r\n                resolve();\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\n\r\nexport const exitChannel = () => {\r\n    let channel = store.getState().channel.channel;\r\n    let channelHandlerID = store.getState().channel.channelHandlerID;\r\n    return new Promise(resolve => {\r\n        store.dispatch(clearMessages());\r\n        store.dispatch(clearChannel());\r\n        sb.removeChannelHandler(channelHandlerID);\r\n        channel.exit((response, error) => {\r\n            if (error) console.log(error);\r\n            resolve();\r\n        });\r\n    });\r\n};\r\n\r\n\r\nexport const createChannel = (channelName) => {\r\n    let userID = store.getState().sbsession.sbsession.currentUser.userId;\r\n    return new Promise(resolve => {\r\n        // Array adds the operatorID's to the channel to provide admin priv.\r\n        sb.OpenChannel.createChannel(channelName, null, null,\r\n            ['admin', userID], (channel, error) => {\r\n                if (error) return console.log(error);\r\n                resolve(channel.url);\r\n            });\r\n    });\r\n};\r\n\r\n\r\nexport const deleteChannel = () => {\r\n    let channelHandlerID = store.getState().channel.channelHandlerID;\r\n    let channelURL = store.getState().channel.channel.url;\r\n    return new Promise(resolve => {\r\n        sb.OpenChannel.getChannel(channelURL, (channel, error) => {\r\n            if (error) return console.log(error);\r\n            channel.delete((response, error) => {\r\n                if (error) {\r\n                    console.log(error);\r\n                    resolve('error');\r\n                } else {\r\n                    store.dispatch(clearChannel());\r\n                    store.dispatch(clearMessages());\r\n                    sb.removeChannelHandler(channelHandlerID);\r\n                    resolve();\r\n                }\r\n            });\r\n        });\r\n    });\r\n};\r\n\r\n\r\n// ------ EVENT HANDLERS ------\r\n// https://docs.sendbird.com/javascript/event_handler#3_channel_handler \r\nexport const addChannelHandler = () => {\r\n    let ChannelHandler = new sb.ChannelHandler();\r\n    let userid = store.getState().userinfo.userid;\r\n    let channelURL = store.getState().channel.channel.url;\r\n    let connectedAt = store.getState().sbsession.sbsession._connectedAt;\r\n    let channelHandlerID = `${userid}${channelURL}${connectedAt}`;\r\n    let channel = store.getState().channel.channel;\r\n\r\n    const getParticipantList = () => {\r\n        let list = [];\r\n        // Below is periodically causing issues. \r\n        // \"channel.createParticipantListQuery is not a function.\" \r\n        let participantListQuery = channel.createParticipantListQuery();\r\n        participantListQuery.next((participantList, error) => {\r\n            if (error) return console.log(error);\r\n            participantList.map((participant) => {\r\n                return list.push(participant.userId);\r\n            });\r\n        });\r\n        return list;\r\n    };\r\n\r\n    store.dispatch(setChannelHandlerID(channelHandlerID));\r\n\r\n    ChannelHandler.onUserEntered = (openChannel, user) => {\r\n        let participantList = getParticipantList();\r\n        store.dispatch(updateParticipants(participantList));\r\n        store.dispatch(addMessage('info', `${user.userId} has joined.`));\r\n    };\r\n    ChannelHandler.onUserExited = (openChannel, user) => {\r\n        let participantList = getParticipantList();\r\n        store.dispatch(updateParticipants(participantList));\r\n        store.dispatch(addMessage('info', `${user.userId} has left.`));\r\n    };\r\n    ChannelHandler.onMessageReceived = (channel, message) => {\r\n        store.dispatch(addMessage(message._sender.userId, message.message));\r\n    };\r\n    // Add channel event handler to the SendBird object.\r\n    sb.addChannelHandler(channelHandlerID, ChannelHandler);\r\n};\r\n\r\n\r\nexport const getChannelList = async () => {\r\n    return new Promise(resolve => {\r\n        let channelList;\r\n        let openChannelListQuery = sb.OpenChannel.createOpenChannelListQuery();\r\n        openChannelListQuery.next((channels, error) => {\r\n            if (error) return console.log(error);\r\n            channelList = channels;\r\n            resolve(channelList);\r\n        })\r\n    });\r\n};\r\n\r\n\r\nexport const sendMessage = (message) => {\r\n    let channel = store.getState().channel.channel;\r\n    channel.sendUserMessage(message, (message, error) => {\r\n        if (error) return console.log(error);\r\n    });\r\n    store.dispatch(addMessage('You', message));\r\n};\r\n\r\n\r\nexport const isOperator = () => {\r\n    let channel = store.getState().channel.channel;\r\n    let result = channel.isOperatorWithUserId(sb.getCurrentUserId());\r\n    return result;\r\n};\r\n\r\n","import React from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { login } from '../api/sb_api';\r\n\r\nconst styles = {\r\n    root: {\r\n        height: '100vh',\r\n    }\r\n}\r\n\r\nclass Login extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            username: '',\r\n            loading: false\r\n        };\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ username: event.target.value })\r\n    };\r\n\r\n    // ------------------------ BEGIN TEMP CODE --------------------------- // \r\n    /*async componentDidMount() {\r\n        await login('test');\r\n        this.props.history.push('/channels');\r\n    };*/\r\n    // ------------------------ END TEMP CODE ----------------------------- // \r\n\r\n    handleClick = async () => {\r\n        if (!this.state.username) return;\r\n        await login(this.state.username);\r\n        this.props.history.push('/channels');\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n            <Grid\r\n                container\r\n                className={classes.root}\r\n                direction=\"column\"\r\n                justify=\"center\"\r\n                alignItems=\"center\"\r\n            >\r\n            <h1>react.chat</h1>\r\n                <TextField\r\n                    placeholder=\"Enter a username\"\r\n                    margin=\"normal\"\r\n                    label=\"Username\"\r\n                    InputLabelProps={{ shrink: true, }}\r\n                    value={this.state.username}\r\n                    onChange={this.handleChange}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={this.handleClick}>\r\n                    Submit\r\n                </Button>\r\n            </Grid>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default withStyles(styles)(Login);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { refreshChannels } from '../../actions/actions'\r\nimport List from '@material-ui/core/List';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\n\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport { getChannelList, enterChannel } from '../../api/sb_api';\r\n\r\nconst styles = {\r\n    root: {\r\n        width: '50%',\r\n        minWidth: 300,\r\n        maxWidth: 600,\r\n        display: 'flex',\r\n        padding: '3rem',\r\n    },\r\n    paper: {\r\n        width: '100%',\r\n        textAlign: 'center',\r\n    },\r\n    heading: {\r\n        justifyContent: 'center',\r\n    },\r\n    list: {\r\n        maxHeight: '50vh',\r\n        overflowY: 'auto',\r\n    },\r\n    button: {\r\n        width: '100%',\r\n        padding: '1rem',\r\n    }\r\n}\r\n\r\nclass ChannelList extends React.Component {\r\n\r\n    async componentDidMount() { \r\n        let channelList = await getChannelList();\r\n        this.props.dispatch(refreshChannels(channelList));\r\n    }\r\n\r\n    handleClick = channelURL => async event => {\r\n        await enterChannel(channelURL);\r\n        this.props.history.push(`/chat/${channelURL}`);\r\n    }\r\n\r\n    render() {\r\n\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <Paper className={classes.paper}>\r\n                    <List \r\n                    className={classes.list}\r\n                    subheader={<ListSubheader color=\"primary\">\r\n                        Channels\r\n                        </ListSubheader>}\r\n                    >\r\n                        {this.props.channels.map((channel, index) => {\r\n                            return (\r\n                                <div key={channel.name + index.toString()}>\r\n                                    <Button\r\n                                        onClick={this.handleClick(channel.url)}\r\n                                        className={classes.button}>\r\n                                        {channel.name}\r\n                                    </Button>\r\n                                </div>\r\n                            )\r\n                        })}\r\n                    </List>\r\n                </Paper>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channels: state.channels\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(ChannelList));","import React from 'react';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport { withStyles } from '@material-ui/core/styles'\r\nimport Button from '@material-ui/core/Button';\r\nimport { createChannel, enterChannel } from '../../api/sb_api';\r\n\r\nconst styles = {\r\n    root: {\r\n    },\r\n    fab: {\r\n        position: 'absolute',\r\n        bottom: 0,\r\n        right: 0,\r\n        margin: 15\r\n    }\r\n};\r\n\r\nclass CreateChannel extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            open: false,\r\n            name: '',\r\n        }\r\n    };\r\n\r\n    handleClick = () => {\r\n        this.setState({ open: true });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ open: false });\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            name: event.target.value\r\n        })\r\n    };\r\n\r\n    handleCreate = async () => {\r\n        if (!this.state.name) {\r\n            return;\r\n        };\r\n        let newChannelURL = await createChannel(this.state.name); \r\n        await enterChannel(newChannelURL);\r\n        this.props.history.push(`/chat/${newChannelURL}`);\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        return (\r\n            <div>\r\n                <Fab color=\"primary\" onClick={this.handleClick} className={classes.fab}>\r\n                    <AddIcon />\r\n                </Fab>\r\n                <Dialog open={this.state.open} onClose={this.handleClose}>\r\n                    <DialogTitle id=\"form-dialog-title\">Create Channel</DialogTitle>\r\n                    <DialogContent>\r\n                        <TextField\r\n                            autoFocus\r\n                            margin=\"dense\"\r\n                            label=\"Channel Name\"\r\n                            fullWidth\r\n                            onChange={this.handleChange}\r\n                        />\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={this.handleClose} color=\"primary\">\r\n                            Cancel\r\n                        </Button>\r\n                        <Button onClick={this.handleCreate} color=\"primary\">\r\n                            Create\r\n                        </Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nexport default withStyles(styles)(CreateChannel);\r\n\r\n","import React from 'react';\r\nimport ChannelList from './ChannelList';\r\nimport CreateChannel from './CreateChannel';\r\nimport { withStyles } from '@material-ui/core/styles'\r\n\r\nconst styles = {\r\n    root: {\r\n        width: '100%',\r\n        display: 'flex',\r\n        direction: 'column',\r\n        justifyContent: 'center',\r\n        alignItems: 'center',\r\n    },\r\n};\r\n\r\nconst Channels = (props) => {\r\n        const { classes } = props;\r\n        return (\r\n            <div className={classes.root}>\r\n                <ChannelList history={props.history} />\r\n                <CreateChannel history={props.history} />\r\n            </div >\r\n        )\r\n};\r\n\r\nexport default withStyles(styles)(Channels);","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport { sendMessage } from '../../api/sb_api';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport SendIcon from '@material-ui/icons/SendRounded';\r\nimport IconButton from '@material-ui/core/IconButton';\r\n\r\nconst styles = {\r\n    root: {\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n        margin: 'auto',\r\n    },\r\n    textField: {\r\n        width: '60%',\r\n    },\r\n};\r\n\r\nclass CreateMessage extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            message: ''\r\n        }\r\n    };\r\n\r\n    handleChange = (event) => {\r\n        this.setState({ message: event.target.value })\r\n    };\r\n\r\n    handleClick = () => {\r\n        sendMessage(this.state.message);\r\n        this.setState({ message: '' });\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        let color;\r\n        !this.state.message ? color = 'default' : color = 'primary';\r\n\r\n        return (\r\n            <div className={classes.root}>\r\n                <TextField\r\n                    multiline\r\n                    rowsMax=\"4\"\r\n                    value={this.state.message}\r\n                    onChange={this.handleChange}\r\n                    className={classes.textField}\r\n                    margin=\"normal\"\r\n                    variant=\"outlined\"\r\n                    InputProps={{\r\n                        endAdornment: (\r\n                            <InputAdornment position=\"end\">\r\n                                <IconButton\r\n                                    variant=\"contained\"\r\n                                    onClick={this.handleClick}\r\n                                    color={color}>\r\n                                    <SendIcon />\r\n                                </ IconButton>\r\n                            </ InputAdornment>\r\n                        )\r\n                    }}\r\n                />\r\n            </div>\r\n        )\r\n    };\r\n\r\n};\r\n\r\nexport default withStyles(styles)(CreateMessage);\r\n","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\n\r\nconst styles = {\r\n    root: {\r\n    },\r\n    messageList: {\r\n        listStyle: 'none',\r\n        padding: 0, // gets rid of the indent\r\n    },\r\n    bubbleWrapper: {\r\n        width: '100%',\r\n        display: 'inline-flex', // sizes bubble to the text\r\n        overflowWrap: 'break-word',\r\n        whiteSpace: 'pre-wrap', // preserves whitespace\r\n    },\r\n    bubbleYou: {\r\n        background: '#e3f2fd',\r\n        color: '#1c54b2',\r\n        borderRadius: 30,\r\n        lineHeight: 1.3,\r\n        marginBottom: '0.25rem',\r\n        marginRight: '2rem',\r\n        marginLeft: 'auto', // pushes bubble to the right\r\n        maxWidth: '60%',\r\n        padding: 10,\r\n    },\r\n    bubbleOther: {\r\n        background: '#dbdbdb',\r\n        color: 'dark gray',\r\n        borderRadius: 30,\r\n        lineHeight: 1.3,\r\n        marginBottom: '0.25rem',\r\n        marginLeft: '2rem', // keeps bubble to the left\r\n        maxWidth: 400,\r\n        padding: 10,\r\n    },\r\n    infoMessage: {\r\n        margin: 'auto',\r\n        marginBottom: '0.5rem',\r\n        marginTop: '0.5rem',\r\n    }\r\n};\r\n\r\nclass DisplayMessages extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.newMessage = null;\r\n        this.setNewMessageRef = element => {\r\n            this.newMessage = element;\r\n        };\r\n        this.scrollToBottom = () => {\r\n            if (this.newMessage) this.newMessage.scrollIntoView();\r\n        };\r\n    };\r\n\r\n    componentDidUpdate() {\r\n        this.scrollToBottom();\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        let bubbleClass;\r\n        let displayMessage;\r\n        return (\r\n            <div className={classes.root}>\r\n                <ul className={classes.messageList}>\r\n                    {this.props.messages.map((message, index) => {\r\n                        if (message.sender === 'You') {\r\n                            bubbleClass = classes.bubbleYou;\r\n                            displayMessage = `${message.sender}: ${message.message}`;\r\n                        } else if (message.sender === 'info') {\r\n                            bubbleClass = classes.infoMessage;\r\n                            displayMessage = `${message.message}`\r\n                        }\r\n                        // info message (example: \"Jeff has joined.\")\r\n                        else {\r\n                            bubbleClass = classes.bubbleOther;\r\n                            displayMessage = `${message.sender}: ${message.message}`;\r\n                        }\r\n                        return (\r\n                            <div\r\n                                key={message.message + index.toString()}\r\n                                ref={this.setNewMessageRef}\r\n                                className={classes.bubbleWrapper}>\r\n                                <div className={bubbleClass}>\r\n                                    <li key={index}>{displayMessage}</li>\r\n                                </div>\r\n                            </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    };\r\n\r\n};\r\n\r\nexport default withStyles(styles)(DisplayMessages);","import React from 'react';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\nconst styles = {\r\n    root: {\r\n        width: 250,\r\n    },\r\n};\r\n\r\nclass Participants extends React.Component { // change this to a stateless component. Will it still update on recieving props?\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        const participantList = (\r\n            <div className={classes.root}>\r\n                <List subheader={<ListSubheader color=\"primary\">\r\n                        Active Users\r\n                        </ListSubheader>}>\r\n                    {this.props.participants.map((participant, index) => {\r\n                        return (\r\n                            <ListItem\r\n                            className={classes.list}\r\n                                key={participant + index.toString()}>\r\n                                {participant}\r\n                            </ListItem>\r\n                        )\r\n                    })}\r\n                </List>\r\n            </div>\r\n        );\r\n\r\n        return (\r\n            <div>\r\n                <Drawer open={this.props.open} onClick={this.props.toggle}>\r\n                    <div>\r\n                        {participantList}\r\n                    </div>\r\n                </Drawer>\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        participants: state.participants,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(Participants));","import React from 'react';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport MoreVertIcon from '@material-ui/icons/MoreVert';\r\nimport Participants from '../Participants';\r\nimport { exitChannel, deleteChannel, isOperator } from '../../../api/sb_api';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { connect } from 'react-redux';\r\n\r\nconst styles = ({\r\n    deleteButton: {\r\n        color: 'red',\r\n    }, \r\n  });\r\n\r\nclass OptionsMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            anchorEl: null,\r\n            toggleParticipants: false,\r\n            disableDelete: true,\r\n        };\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.setState({\r\n            disableDelete: !isOperator(),\r\n        })\r\n    };\r\n\r\n    handleClick = event => {\r\n        this.setState({ anchorEl: event.currentTarget });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    handleLeave = () => {\r\n        exitChannel();\r\n        this.props.history.push('/channels');\r\n    };\r\n\r\n    handleDelete = async () => {\r\n        await deleteChannel(); \r\n        this.props.history.push(\"/channels\");\r\n    };\r\n\r\n    toggleParticipants = () => {\r\n        this.setState({\r\n            toggleParticipants: !this.state.toggleParticipants,\r\n        });\r\n        this.handleClose();\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        const { anchorEl } = this.state;\r\n        const open = Boolean(anchorEl);\r\n\r\n        return (\r\n            <div>\r\n                <IconButton\r\n                    onClick={this.handleClick}\r\n                >\r\n                    <MoreVertIcon />\r\n                </IconButton>\r\n                <Menu\r\n                    anchorEl={anchorEl}\r\n                    open={open}\r\n                    onClose={this.handleClose}\r\n                >\r\n                    <MenuItem onClick={this.toggleParticipants}>\r\n                        View Participants\r\n                    </MenuItem>\r\n                    <MenuItem onClick={this.handleLeave}>\r\n                        Leave Channel\r\n                    </MenuItem>\r\n                    <MenuItem \r\n                    disabled={this.state.disableDelete}\r\n                    onClick={this.handleDelete}\r\n                    className={classes.deleteButton}>\r\n                        Delete Channel\r\n                    </MenuItem>\r\n                </Menu>\r\n                <Participants\r\n                    open={this.state.toggleParticipants}\r\n                    toggle={this.toggleParticipants} />\r\n            </div>\r\n        );\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channel: state.channel.channel,\r\n        messages: state.messages,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(OptionsMenu));","import React from 'react';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport OptionsMenu from './OptionsMenu';\r\n\r\nconst InfoBar = (props) => {\r\n\r\n    return (\r\n        <div>\r\n            <Toolbar>\r\n                <Typography variant=\"h6\" color=\"inherit\">\r\n                    {props.channel.name}\r\n                </Typography>\r\n                <OptionsMenu history={props.history} />\r\n            </Toolbar>\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default InfoBar;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport CreateMessage from './CreateMessage';\r\nimport DisplayMessages from './DisplayMessages';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport { addChannelHandler, exitChannel } from '../../api/sb_api';\r\nimport InfoBar from './InfoBar/InfoBar';\r\n\r\nconst styles = {\r\n    root: {\r\n        width: '100%',\r\n        height: '90vh', // maybe position at bottom?\r\n        display: 'flex',\r\n        flexFlow: 'column',\r\n        justifyContent: 'flex-end',\r\n\r\n    },\r\n    displayMessages: {\r\n        overflowY: 'auto',\r\n    },\r\n    createMessage: {\r\n        width: '100%'\r\n    },\r\n    infoContainer: {\r\n        maxHeight: '7vh',\r\n        minHeight: '7vh',\r\n        marginBottom: 'auto',\r\n        display: 'flex',\r\n        flexFlow: 'row',\r\n        alignItems: 'center',\r\n        paddingLeft: '10px',\r\n        paddingRight: '10px',\r\n    },\r\n    loadingSpinner: {\r\n        height: '90vh', // maybe position at bottom?\r\n        display: 'flex',\r\n        alignItems: 'center',\r\n        justifyContent: 'center',\r\n    }\r\n}\r\n\r\nclass Chat extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            loading: true\r\n        }\r\n    }\r\n\r\n    onUnload = (event) => {\r\n        event.preventDefault(); \r\n        exitChannel(); // this might need to be logout\r\n        // Chrome requires returnValue to be set\r\n        event.returnValue = '';\r\n    }\r\n\r\n    async componentDidMount() {\r\n        addChannelHandler();\r\n        this.setState({ loading: false })\r\n        window.addEventListener(\"beforeunload\", this.onUnload);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        window.removeEventListener(\"beforeunload\", this.onUnload);\r\n    };\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        if (this.state.loading === true) {\r\n            return (\r\n                <div className={classes.loadingSpinner}>\r\n                    <CircularProgress />\r\n                </div>\r\n            )\r\n        };\r\n\r\n        return (\r\n            <div className={classes.root} >\r\n                <div className={classes.infoContainer}>\r\n                    <InfoBar \r\n                    channel={this.props.channel} \r\n                    history={this.props.history}\r\n                    />\r\n                    \r\n                </div>\r\n                <div className={classes.displayMessages}>\r\n                    <DisplayMessages messages={this.props.messages} /> {/* connect to store directly? */}\r\n                </div>\r\n                <div className={classes.createMessage}>\r\n                    <CreateMessage />\r\n                </div>\r\n            </div>\r\n        )\r\n    };\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channel: state.channel.channel,\r\n        messages: state.messages,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(withStyles(styles)(Chat));\r\n\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nconst AlertDialog = (props) => {\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props.showAlert}\r\n        onClose={props.toggleAlert}\r\n      >\r\n        <DialogTitle>{\"No channel selected.\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText>\r\n            You need to select a channel before you can chat.\r\n            </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={props.toggleAlert} color=\"primary\" autoFocus>\r\n            Close\r\n            </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AlertDialog;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport { Link } from 'react-router-dom';\r\nimport { logout } from '../../api/sb_api';\r\nimport AlertDialog from './AlertDialog';\r\n\r\nclass NavMenu extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            anchorEl: null,\r\n            showAlert: false,\r\n        };\r\n    };\r\n\r\n    handleOpen = event => {\r\n        this.setState({\r\n            anchorEl: event.currentTarget\r\n        });\r\n    };\r\n\r\n    handleClose = () => {\r\n        this.setState({ anchorEl: null });\r\n    };\r\n\r\n    toggleAlert = () => {\r\n        this.setState({\r\n            showAlert: !this.state.showAlert,\r\n        });\r\n    };\r\n\r\n    handleToChat = () => {\r\n        if (!this.props.channelURL) {\r\n            this.handleClose();\r\n            this.toggleAlert();\r\n        } else {\r\n            this.handleClose();\r\n            this.props.history.push(`/chat/${this.props.channelURL}`);\r\n        };\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <IconButton color=\"inherit\" >\r\n                    <MenuIcon\r\n                        onClick={this.handleOpen} />\r\n                    <Menu\r\n                        anchorEl={this.state.anchorEl}\r\n                        open={Boolean(this.state.anchorEl)}\r\n                        onClose={this.handleClose}>\r\n                        <MenuItem\r\n                            onClick={this.handleToChat}\r\n                        >\r\n                            Chat\r\n                        </ MenuItem>\r\n                        <MenuItem\r\n                            onClick={this.handleClose}\r\n                            component={Link}\r\n                            to={\"/channels\"}\r\n                        >\r\n                            Channels\r\n                        </ MenuItem>\r\n                        <MenuItem\r\n                            onClick={logout}\r\n                            component={Link}\r\n                            to={\"/login\"}\r\n                        >\r\n                            Logout\r\n                        </ MenuItem>\r\n                    </Menu>\r\n                </IconButton>\r\n                <AlertDialog\r\n                    showAlert={this.state.showAlert}\r\n                    toggleAlert={this.toggleAlert}\r\n                />\r\n            </div>\r\n        )\r\n    };\r\n\r\n};\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        channelURL: state.channel.channel.url,\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps)(NavMenu);","import React from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { withStyles } from '@material-ui/core/styles';\r\nimport NavMenu from './NavMenu';\r\n\r\nconst styles = {\r\n    root: {\r\n        display: 'flex',\r\n    },\r\n    menuIcon: {\r\n        marginLeft: 'auto',\r\n    },\r\n};\r\n\r\nconst Navbar = (props) => {\r\n\r\n    const { classes } = props;\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <Typography variant=\"h6\" color=\"inherit\" className={classes.grow}>\r\n                        react.chat\r\n                        </Typography>\r\n                    <div className={classes.menuIcon} >\r\n                        <NavMenu history={props.history} />\r\n                    </div>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default withStyles(styles)(Navbar);","import React, { Component } from 'react';\nimport './App.css';\nimport { connect } from 'react-redux';\nimport Login from './components/Login';\nimport Channels from './components/Channels/Channels';\nimport Chat from './components/Chat/Chat';\nimport Navbar from './components/Navbar/Navbar';\nimport { BrowserRouter as Router, Route, Redirect } from 'react-router-dom';\nimport { withStyles } from '@material-ui/core/styles';\n\n\nconst styles = {\n  root: {\n  }\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loading: 'true',\n    };\n  };\n\n  render() {\n\n    const { classes } = this.props;\n\n    if (!this.props.userid) {\n      return (\n        <Router>\n          <div>\n            <Redirect to=\"/login\" /> {/* do this differently */}\n            <Route path=\"/login\" component={Login} />\n          </div>\n        </Router>\n      );\n    };\n\n    return (\n      <Router>\n        <div>\n          <Route component={Navbar} />\n          <div className={classes.root}>\n            <Route path='/chat' component={Chat} />\n            <Route exact path=\"/channels\" component={Channels} />\n          </div>\n        </div>\n      </Router>\n    )\n  };\n\n};\n\nconst mapStateToProps = state => {\n  return {\n    userid: state.userinfo.userid,\n  };\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(App));","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { combineReducers } from 'redux';\r\n\r\nconst userinfoInitState = { userid: '' };\r\n\r\nconst userinfo = (state = userinfoInitState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_USERID':\r\n            return Object.assign({}, state, {\r\n                userid: action.userid\r\n            });\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst sbsessionInitState = { sbsession: '' }\r\n\r\nconst sbsession = (state = sbsessionInitState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_SBSESS':\r\n            return Object.assign({}, state, {\r\n                sbsession: action.sb\r\n            })\r\n        default:\r\n            return state\r\n    }\r\n};\r\n\r\nconst channelInitState = { channelHandlerID: '', channel: '' }\r\n\r\nconst channel = (state = channelInitState, action) => {\r\n    switch (action.type) {\r\n        case 'SET_CHANNEL_HANDLER_ID': \r\n            return Object.assign({}, state, {\r\n                channelHandlerID: action.channelHandlerID\r\n            });\r\n        case 'SET_CHANNEL': \r\n            return Object.assign({}, state, {\r\n                channel: action.channel\r\n            });\r\n        case 'CLEAR_CHANNEL': \r\n            return Object.assign({}, state, {\r\n                channel: ''\r\n            });\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// Messages are kept in Redux store to allow them to persist and\r\n// reload despite the user potentially navigating to different screens\r\n// and unmounting the Chat component.\r\nconst messages = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'ADD_MESSAGE':\r\n            return [\r\n                ...state,\r\n                {\r\n                    sender: action.sender,\r\n                    message: action.message\r\n                }\r\n            ]\r\n        case 'CLEAR_MESSAGES':\r\n            return [];\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst participants = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'UPDATE_PARTICIPANTS':\r\n            return action.participants;\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nconst channels = (state = [], action) => {\r\n    switch (action.type) {\r\n        case 'REFRESH_CHANNELS':\r\n            return action.channels;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nconst rootReducer = combineReducers({\r\n    userinfo: userinfo,\r\n    sbsession: sbsession,\r\n    channel: channel,\r\n    messages: messages,\r\n    participants: participants,\r\n    channels: channels\r\n});\r\n\r\nexport default rootReducer;\r\n\r\n\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { createStore } from 'redux';\nimport rootReducer from './reducers/reducers';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nconst store = createStore(rootReducer, {});\n\nReactDOM.render(\n    <React.Fragment>\n        <CssBaseline />\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </React.Fragment>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\nexport { store };\n"],"sourceRoot":""}